getCols <- function(colName, colour = T, rev = F){
labs <- c("very low", "low", "high", "very high")
# Getting the division points for that var
divisions <- summary(schoolData[,colName])[c(1,2,4,5,6)]
rankLabs <- cut(schoolData[,colName], breaks = divisions, labels = labs, include.lowest = T)
# Getting the averages for that county
countyAv <- with(schoolData, tapply(schoolData[,colName], county, mean))
groups <- cut(countyAv, breaks = divisions, labels = labs)
if(colour){
colours <- rep("missing", 58)
indexes <- which(countyNames %in% unique(schoolData$county))
colours[indexes] <- as.character(groups)
if(rev){
colours <- ifelse(colours == "very high", "red",
ifelse(colours == "high", "orange",
ifelse(colours == "low", "light green",
ifelse(colours == "very low", "green", "white"))))
} else {
colours <- ifelse(colours == "very high", "green",
ifelse(colours == "high", "light green",
ifelse(colours == "low", "orange",
ifelse(colours == "very low", "red", "white"))))
}
return(colours)
} else{
return(groups)
}
}
getCorLab <- function(predLabs, actLabs){
posLabs <- c(1,2,3,4)
best <- 0
# Getting indexes of predicted labels
vec1 <- predLabs == 1
vec2 <- predLabs == 2
vec3 <- predLabs == 3
vec4 <- predLabs == 4
for(i in 1:4){
for(j in 1:4){
for(a in 1:4){
for(b in 1:4){
if(table(c(i,j,a,b))[1] == 1){
predLabs[vec1] <- posLabs[i]
predLabs[vec2] <- posLabs[j]
predLabs[vec3] <- posLabs[a]
predLabs[vec4] <- posLabs[b]
acc <- mean(ifelse(predLabs == actLabs, 1, 0))
if(acc > best){
best <- acc
bestVec <- c(i,j,a,b) # change the labels in order to these
}
}
}
}
}
}
return(list(acc = best, labs = bestVec))
}
getKcluster <- function(vars){
if(is.character(vars)){
vars <- which(names(pca.frame) %in% vars)
}
clust <- kmeans(pca.frame[,vars], iter.max = 300, centers = 4)
res <- getCorLab(clust$cluster, actLabs)
return(res)
}
map("county", region = "California", fill = T, col = getCols("avscr"))
getCols("avscr", colour = F)
pca.frame <- schoolData[,c(5,7,8,11,12,13,14,15)]
head(pca.frame)
head(rankLabs)
head(rankLabs == "very high")
dev.off()
bplot1 <- pca.frame[rankLabs == "very high",]
bplot2 <- pca.frame[rankLabs == "high",]
bplot3 <- pca.frame[rankLabs == "low",]
bplot4 <- pca.frame[rankLabs == "very low",]
?apply
bplot1 <- apply(pca.frame[rankLabs == "very high",], 2, mean)
bplot1
maxs <- apply(pca.frame, 2, max)
mins <- apply(pca.frame, 2, min)
pca.frame.scaled <- as.data.frame(scale(pca.frame, center = mins, scale = maxs - mins))
bplot1 <- apply(pca.frame.scaled[rankLabs == "very high",], 2, mean)
bplot2 <- apply(pca.frame.scaled[rankLabs == "high",], 2, mean)
bplot3 <- apply(pca.frame.scaled[rankLabs == "low",], 2, mean)
bplot4 <- apply(pca.frame.scaled[rankLabs == "very low",], 2, mean)
bplot1
hist(bplot1, freq = F)
hist(bplot2, freq = F)
hist(bplot3, freq = F)
hist(bplot4, freq = F)
?barplot
barplot(bplot1)
barplot(bplot2)
barplot(bplot3)
barplot(bplot4)
barplot(bplot1, xlim = c(0, 0.7))
barplot(bplot2, xlim = c(0, 0.7))
barplot(bplot3, xlim = c(0, 0.7))
barplot(bplot4, xlim = c(0, 0.7))
barplot(bplot1, ylim = c(0, 0.7))
barplot(bplot2, ylim = c(0, 0.7))
barplot(bplot3, ylim = c(0, 0.7))
barplot(bplot4, ylim = c(0, 0.7))
rank(c(1,3,2))
rank(c(1,3,4,2))
orderCol <- function(vec){
orders <- rank(vec) # high value will be bad - hardcore later
col <- ifelse(orders == 1, "green",
ifelse(orders == 2, "light green",
ifelse(orders == 3, "orange",
ifelse(orders == 4, "red", "white"))))
return(col)
}
names(pca.frame)
pca.frame.mod <- pca.frame
pca.frame.mod[,c(4,5,7)] <- 1/pca.frame.mod[,c(4,5,7)]
maxs <- apply(pca.frame.mod, 2, max)
mins <- apply(pca.frame.mod, 2, min)
pca.frame.scaled <- as.data.frame(scale(pca.frame.mod, center = mins, scale = maxs - mins))
bplot1 <- apply(pca.frame.scaled[rankLabs == "very high",], 2, mean)
bplot2 <- apply(pca.frame.scaled[rankLabs == "high",], 2, mean)
bplot3 <- apply(pca.frame.scaled[rankLabs == "low",], 2, mean)
bplot4 <- apply(pca.frame.scaled[rankLabs == "very low",], 2, mean)
cols <- apply(rbind(bplot1, bplot2, bplot3, bplot4), 2, ordercol)
cols <- apply(rbind(bplot1, bplot2, bplot3, bplot4), 2, orderCol)
head(cols)
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,])
barplot(bplot2, ylim = c(0, 0.7), col = cols[2,])
barplot(bplot3, ylim = c(0, 0.7), col = cols[3,])
barplot(bplot4, ylim = c(0, 0.7), col = cols[4,])
pca.frame.scaled[,"compstu"]
pca.frame.mod[,"compstu"]
pca.frame[,"compstu"]
pca.frame.mod <- pca.frame + 1
pca.frame.mod[,c(4,5,7)] <- 1/pca.frame.mod[,c(4,5,7)]
maxs <- apply(pca.frame.mod, 2, max)
mins <- apply(pca.frame.mod, 2, min)
pca.frame.scaled <- as.data.frame(scale(pca.frame.mod, center = mins, scale = maxs - mins))
bplot1 <- apply(pca.frame.scaled[rankLabs == "very high",], 2, mean)
bplot2 <- apply(pca.frame.scaled[rankLabs == "high",], 2, mean)
bplot3 <- apply(pca.frame.scaled[rankLabs == "low",], 2, mean)
bplot4 <- apply(pca.frame.scaled[rankLabs == "very low",], 2, mean)
cols <- apply(rbind(bplot1, bplot2, bplot3, bplot4), 2, orderCol)
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,])
barplot(bplot2, ylim = c(0, 0.7), col = cols[2,])
barplot(bplot3, ylim = c(0, 0.7), col = cols[3,])
barplot(bplot4, ylim = c(0, 0.7), col = cols[4,])
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], axes = FALSE)
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,])
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], ylab = "Arbitrary Scale")
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], ylab = "Arbitrary Scale",
main = "Very high scoring")
par(mfrow = c(2,2))
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], ylab = "Arbitrary Scale",
main = "Very high scoring")
barplot(bplot2, ylim = c(0, 0.7), col = cols[2,], ylab = "Arbitrary Scale",
main = "High scoring")
barplot(bplot3, ylim = c(0, 0.7), col = cols[3,], ylab = "Arbitrary Scale",
main = "Low scoring")
barplot(bplot4, ylim = c(0, 0.7), col = cols[4,], ylab = "Arbitrary Scale",
main = "Very low scoring")
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], ylab = "Arbitrary Scale",
main = "Very high scoring", las = 2)
par(mfrow = c(2,2))
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], ylab = "Arbitrary Scale",
main = "Very high scoring", las = 2)
barplot(bplot2, ylim = c(0, 0.7), col = cols[2,], ylab = "Arbitrary Scale",
main = "High scoring", las = 2)
barplot(bplot3, ylim = c(0, 0.7), col = cols[3,], ylab = "Arbitrary Scale",
main = "Low scoring", las = 2)
barplot(bplot4, ylim = c(0, 0.7), col = cols[4,], ylab = "Arbitrary Scale",
main = "Very low scoring", las = 2)
map("county", region = "California", fill = T, col = getCols("avscr"))
dev.off()
dev.off()
map("county", region = "California", fill = T, col = getCols("avscr"))
orderCol <- function(vec){
orders <- rank(vec) # high value will be bad - hardcore later
col <- ifelse(orders == 1, "green",
ifelse(orders == 2, "blue",
ifelse(orders == 3, "orange",
ifelse(orders == 4, "red", "white"))))
return(col)
}
getCols <- function(colName, colour = T, rev = F){
labs <- c("very low", "low", "high", "very high")
# Getting the division points for that var
divisions <- summary(schoolData[,colName])[c(1,2,4,5,6)]
rankLabs <- cut(schoolData[,colName], breaks = divisions, labels = labs, include.lowest = T)
# Getting the averages for that county
countyAv <- with(schoolData, tapply(schoolData[,colName], county, mean))
groups <- cut(countyAv, breaks = divisions, labels = labs)
if(colour){
colours <- rep("missing", 58)
indexes <- which(countyNames %in% unique(schoolData$county))
colours[indexes] <- as.character(groups)
if(rev){
colours <- ifelse(colours == "very high", "red",
ifelse(colours == "high", "orange",
ifelse(colours == "low", "blue",
ifelse(colours == "very low", "green", "white"))))
} else {
colours <- ifelse(colours == "very high", "green",
ifelse(colours == "high", "blue",
ifelse(colours == "low", "orange",
ifelse(colours == "very low", "red", "white"))))
}
return(colours)
} else{
return(groups)
}
}
map("county", region = "California", fill = T, col = getCols("avscr"))
cols <- apply(rbind(bplot1, bplot2, bplot3, bplot4), 2, orderCol)
par(mfrow = c(2,2))
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], ylab = "Arbitrary Scale",
main = "Very high scoring", las = 2)
barplot(bplot2, ylim = c(0, 0.7), col = cols[2,], ylab = "Arbitrary Scale",
main = "High scoring", las = 2)
barplot(bplot3, ylim = c(0, 0.7), col = cols[3,], ylab = "Arbitrary Scale",
main = "Low scoring", las = 2)
barplot(bplot4, ylim = c(0, 0.7), col = cols[4,], ylab = "Arbitrary Scale",
main = "Very low scoring", las = 2)
dev.off()
dev.off()
par(mfrow = c(2,2))
barplot(bplot1, ylim = c(0, 0.7), col = cols[1,], ylab = "Arbitrary Scale",
main = "Very high scoring", las = 2)
barplot(bplot2, ylim = c(0, 0.7), col = cols[2,], ylab = "Arbitrary Scale",
main = "High scoring", las = 2)
barplot(bplot3, ylim = c(0, 0.7), col = cols[3,], ylab = "Arbitrary Scale",
main = "Low scoring", las = 2)
barplot(bplot4, ylim = c(0, 0.7), col = cols[4,], ylab = "Arbitrary Scale",
main = "Very low scoring", las = 2)
plot(schoolData$avginc,schoolData$avscr)
dev.off()
dev.off()
plot(schoolData$avginc,schoolData$avscr)
plot(schoolData$expnstu,schoolData$avscr)
plot(schoolData$expnstu/schoolData$avginc,schoolData$avscr)
cor(schoolData$avginc,schoolData$avscr)
cor(schoolData$expnstu,schoolData$avscr)
cor(schoolData$expnstu/schoolData$avginc,schoolData$avscr)
cor(schoolData$avginc/schoolData$expnstu,schoolData$avscr)
cor(schoolData$str,schoolData$expnstu)
cor(schoolData$str,schoolData$elpct)
cor(schoolData$mealpct,schoolData$expnstu)
cor(schoolData$mealpct,schoolData$str)
cor(schoolData$mealpct,c(schoolData$str, schoolData$expnstu))
cors <- sapply(names(pca.frame), function(x,y){
co <- sapply(y, cor, x)
}, names(pca.frame))
cors <- sapply(pca.frame, function(x,y){
co <- sapply(y, cor, x)
}, pca.frame)
cors
cors <- sapply(pca.frame, function(x,y){
co <- abs(sapply(y, cor, x))
}, pca.frame)
cors
corPlot <- data.frame(Indicator = names(pca.frame))
ggplot(corPlot, aes(x = Indicator, y = Indicator)) +
geom_point()
library(ggplot2)
corPlot <- data.frame(Indicator = names(pca.frame))
ggplot(corPlot, aes(x = Indicator, y = Indicator)) +
geom_point()
ggplot(corPlot, aes(x = Indicator, y = Indicator, size = 0)) +
geom_point() +
theme_bw()
expand.grid(x = corPlot$Indicator, y = corPlot$Indicator)
corGrid <- expand.grid(x = corPlot$Indicator, y = corPlot$Indicator)
ggplot(corGrid, aes(x = x, y = y)) +
geom_point() +
theme_bw() +
()
ggplot(corGrid, aes(x = x, y = y)) +
geom_point() +
theme_bw()
corGrid$cor <- cors
dim(corGrid)
length(as.vector(cors))
corGrid$cor <- as.vector(cors)
View(corGrid)
corGrid
cors
ggplot(corGrid, aes(x = x, y = y, size = cor)) +
geom_point() +
theme_bw()
1+(0:5)*9
1+(0:7)*9
corGrid <- corGrid[-c(1+(0:7)*9),]
ggplot(corGrid, aes(x = x, y = y, size = cor)) +
geom_point() +
theme_bw()
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw()
names(pca.frame)
corGrid <- expand.grid(x = names(pca.frame[,c(4,5,6)]), y = names(pca.frame[,c(2,3,7,8)]))
head(corGrid)
cors <- sapply(pca.frame[,c(4,5,6)], function(x,y){
co <- abs(sapply(y, cor, x))
}, pca.frame[,c(2,3,7,8)])
corGrid$cor <- as.vector(cors)
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw()
?scale_color_continuous
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw() +
xlab("School policy") +
ylab("School detail") +
scale_colour_gradientn()
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw() +
xlab("School policy") +
ylab("School detail") +
scale_colour_gradient2()
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw() +
xlab("School policy") +
ylab("School detail") +
scale_colour_gradient2(low = muted("red"), mid = "blue", high = muted("green"))
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw() +
xlab("School policy") +
ylab("School detail") +
scale_colour_gradient2(mid = "green")
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw() +
xlab("School policy") +
ylab("School detail") +
scale_colour_gradient2(mid = "red")
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw() +
xlab("School policy") +
ylab("School detail") +
scale_colour_gradient2(mid = "red", name = "")
ggplot(corGrid, aes(x = x, y = y, size = cor, colour = cor)) +
geom_point() +
theme_bw() +
xlab("School policy") +
ylab("School detail") +
scale_colour_gradient2(mid = "red", name = "Correlation")
names(schoolData)
}
Can_isabe_do_this <- function(question){
response <- c("YES", "NO")
return sample(response, c(0.3,0.7))
}
Can_isabe_do_this <- function(question){
response <- c("YES", "NO")
return sample(response, c(0.3,0.7))
}
Can_isabe_do_this <- function(question){
response <- c("YES", "NO")
return(sample(response, c(0.3,0.7)))
}
Can_isabel_do_this <- function(question){
response <- c("YES", "NO")
return(sample(response, c(0.3,0.7)))
}
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this <- function(question){
response <- c("YES", "NO")
answer <- sample(c(1,2), c(0.3,0.7))
return(response[answer])
}
Can_isabel_do_this("Go to school")
Can_isabel_do_this <- function(question){
response <- c("YES", "NO")
answer <- sample(c(1,2), c(0.3,0.7))
print(answer)
print(response)
return(response[answer])
}
Can_isabel_do_this("Go to school")
?sample
Can_isabel_do_this <- function(question){
response <- c("YES", "NO")
answer <- sample(c(1,2), 1, prob = c(0.3,0.7))
return(response[answer])
}
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
Can_isabel_do_this("Go to school")
if (!require("wordcloud")) install.packages("wordcloud"); library(wordcloud)
setwd("C:/Users/Dre/Dropbox/Barna/Master/TextMining/AndyLimberMinesTekst/Andreas_project")
word_data <- read.table("data_export.csv", sep = ",")
colnames(word_data) <- c("Word", "Topic_1", "Topic_2", "Topic_3", "Sentiment")
word_data$Topic_1 <- word_data$Topic_1 / min(word_data$Topic_1)
word_data$Topic_2 <- word_data$Topic_2 / min(word_data$Topic_2)
word_data$Topic_3 <- word_data$Topic_3 / min(word_data$Topic_3)
cloud_frame_1 <- word_data[word_data$Topic_1 > 10000,]
cloud_frame_1$colours <- "black"
cloud_frame_1$colours[cloud_frame_1$Word == "reliabl"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "comfort"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "excel"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "easi"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "cheap"] <- "green"
cloud_frame_2 <- word_data[word_data$Topic_2 > 7000,]
cloud_frame_2$colours <- "black"
View(cloud_frame_2)
cloud_frame_2$colours <- "black"
cloud_frame_1$colours[cloud_frame_1$Word == "cost"] <- "red"
cloud_frame_1$colours[cloud_frame_1$Word == "expens"] <- "red"
cloud_frame_1$colours[cloud_frame_1$Word == "fault"] <- "red"
cloud_frame_1$colours[cloud_frame_1$Word == "issu"] <- "red"
cloud_frame_1$colours[cloud_frame_1$Word == "old"] <- "red"
cloud_frame_1$colours[cloud_frame_1$Word == "problem"] <- "red"
cloud_frame_1$colours[cloud_frame_1$Word == "replac"] <- "red"
cloud_frame_1$colours[cloud_frame_1$Word == "reliabl"] <- "green"
wordcloud(cloud_frame_2$Word, cloud_frame_2$Topic_2, colors = cloud_frame_2$colours,
scale = c(3,0.2), ordered.colors = T)
cloud_frame_2$colours <- "black"
cloud_frame_1$colours[cloud_frame_2$Word == "cost"] <- "red"
cloud_frame_1$colours[cloud_frame_2$Word == "expens"] <- "red"
cloud_frame_1$colours[cloud_frame_2$Word == "fault"] <- "red"
cloud_frame_1$colours[cloud_frame_2$Word == "issu"] <- "red"
cloud_frame_1$colours[cloud_frame_2$Word == "old"] <- "red"
cloud_frame_1$colours[cloud_frame_2$Word == "problem"] <- "red"
cloud_frame_1$colours[cloud_frame_2$Word == "replac"] <- "red"
cloud_frame_1$colours[cloud_frame_2$Word == "reliabl"] <- "green"
wordcloud(cloud_frame_2$Word, cloud_frame_2$Topic_2, colors = cloud_frame_2$colours,
scale = c(3,0.2), ordered.colors = T)
cloud_frame_2$colours <- "black"
cloud_frame_2$colours[cloud_frame_2$Word == "cost"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "expens"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "fault"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "issu"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "old"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "problem"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "replac"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "reliabl"] <- "green"
wordcloud(cloud_frame_2$Word, cloud_frame_2$Topic_2, colors = cloud_frame_2$colours,
scale = c(3,0.2), ordered.colors = T)
cloud_frame_3 <- word_data[word_data$Topic_3 > 7000,]
nrow(cloud_frame_3)
cloud_frame_3$Word
cloud_frame_3 <- word_data[word_data$Topic_3 > 7000,]
cloud_frame_3$colours <- "black"
cloud_frame_3$colours[cloud_frame_3$Word == "best"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "better"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "comfort"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "econom"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "excel"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "qualiti"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "recommend"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "reliabl"] <- "green"
wordcloud(cloud_frame_3$Word, cloud_frame_3$Topic_3, colors = cloud_frame_3$colours,
scale = c(3,0.2), ordered.colors = T)
word_data <- read.table("data_export.csv", sep = ",")
colnames(word_data) <- c("Word", "Topic_1", "Topic_2", "Topic_3", "Sentiment")
word_data$Topic_1 <- word_data$Topic_1 / min(word_data$Topic_1)
word_data$Topic_2 <- word_data$Topic_2 / min(word_data$Topic_2)
word_data$Topic_3 <- word_data$Topic_3 / min(word_data$Topic_3)
cloud_frame_1 <- word_data[word_data$Topic_1 > 10000,]
cloud_frame_1$colours <- "black"
cloud_frame_1$colours[cloud_frame_1$Word == "reliabl"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "comfort"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "excel"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "easi"] <- "green"
cloud_frame_1$colours[cloud_frame_1$Word == "cheap"] <- "green"
wordcloud(cloud_frame_1$Word, cloud_frame_1$Topic_1, colors = cloud_frame_1$colours,
scale = c(3,0.2), ordered.colors = T)
cloud_frame_2 <- word_data[word_data$Topic_2 > 7000,]
cloud_frame_2$colours <- "black"
cloud_frame_2$colours[cloud_frame_2$Word == "cost"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "expens"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "fault"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "issu"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "old"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "problem"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "replac"] <- "red"
cloud_frame_2$colours[cloud_frame_2$Word == "reliabl"] <- "green"
wordcloud(cloud_frame_2$Word, cloud_frame_2$Topic_2, colors = cloud_frame_2$colours,
scale = c(3,0.2), ordered.colors = T)
cloud_frame_3 <- word_data[word_data$Topic_3 > 7000,]
cloud_frame_3$colours <- "black"
cloud_frame_3$colours[cloud_frame_3$Word == "best"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "better"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "comfort"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "econom"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "excel"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "qualiti"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "recommend"] <- "green"
cloud_frame_3$colours[cloud_frame_3$Word == "reliabl"] <- "green"
wordcloud(cloud_frame_3$Word, cloud_frame_3$Topic_3, colors = cloud_frame_3$colours,
scale = c(3,0.2), ordered.colors = T)
nrow(word_data)
